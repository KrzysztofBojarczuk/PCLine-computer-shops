{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskemployeeService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://localhost:7068/api/TaskEmployee/';\n  }\n  getTaskEmployeeService(searchTerm) {\n    return this.http.get(`${this.apiUrl}?searchTerm=${searchTerm}`);\n  }\n  createTaskEmployee(taskEmployeeData) {\n    const formData = new FormData();\n    formData.append('taskCreatedDate', taskEmployeeData.taskCreatedDate.toISOString());\n    formData.append('title', taskEmployeeData.title);\n    formData.append('description', taskEmployeeData.description);\n    formData.append('timeEstimated', taskEmployeeData.timeEstimated.toString());\n    formData.append('taskStatus', taskEmployeeData.taskStatus.toString());\n    formData.append('nameEmployee', taskEmployeeData.nameEmployee);\n    if (taskEmployeeData.files && taskEmployeeData.files.length > 0) {\n      for (let i = 0; i < taskEmployeeData.files.length; i++) {\n        formData.append('files', taskEmployeeData.files[i]);\n      }\n    }\n    return this.http.post(`${this.apiUrl}`, formData);\n  }\n  updateTaskEmployee(taskEmployeeId, updateTaskEmployee) {\n    return this.http.put(`${this.apiUrl}${taskEmployeeId}`, updateTaskEmployee);\n  }\n  deleteTaskEmployee(taskEmployeeId) {\n    return this.http.delete(`${this.apiUrl}${taskEmployeeId}`);\n  }\n  getTaskFilesByEmployeeId(taskEmployeeId) {\n    return this.http.get(`${this.apiUrl}GetTaskFiles/${taskEmployeeId}`);\n  }\n  deleteFileService(taskEmployeeId, fileId) {\n    return this.http.delete(`${this.apiUrl}TaskFile/${taskEmployeeId}/${fileId}`);\n  }\n  addFilesToTaskEmployee(taskEmployeeId, files) {\n    const formData = new FormData();\n    for (let i = 0; i < files.length; i++) {\n      formData.append('files', files[i]);\n    }\n    return this.http.post(`${this.apiUrl}AddFiles/${taskEmployeeId}`, formData);\n  }\n}\n_class = TaskemployeeService;\n_class.ɵfac = function TaskemployeeService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,0CAA0C;EAEpB;EAEvCC,sBAAsB,CAACC,UAAmB;IACxC,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAClB,GAAG,IAAI,CAACC,MAAM,eAAeF,UAAU,EAAE,CAC1C;EACH;EAEAG,kBAAkB,CAChBC,gBAA8B;IAE9B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/BD,QAAQ,CAACE,MAAM,CACb,iBAAiB,EACjBH,gBAAgB,CAACI,eAAe,CAACC,WAAW,EAAE,CAC/C;IACDJ,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,gBAAgB,CAACM,KAAK,CAAC;IAChDL,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,gBAAgB,CAACO,WAAW,CAAC;IAC5DN,QAAQ,CAACE,MAAM,CAAC,eAAe,EAAEH,gBAAgB,CAACQ,aAAa,CAACC,QAAQ,EAAE,CAAC;IAC3ER,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEH,gBAAgB,CAACU,UAAU,CAACD,QAAQ,EAAE,CAAC;IACrER,QAAQ,CAACE,MAAM,CAAC,cAAc,EAAEH,gBAAgB,CAACW,YAAY,CAAC;IAE9D,IAAIX,gBAAgB,CAACY,KAAK,IAAIZ,gBAAgB,CAACY,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MAC/D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,gBAAgB,CAACY,KAAK,CAACC,MAAM,EAAEC,CAAC,EAAE,EAAE;QACtDb,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,gBAAgB,CAACY,KAAK,CAACE,CAAC,CAAC,CAAC;;;IAIvD,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CAAqB,GAAG,IAAI,CAACjB,MAAM,EAAE,EAAEG,QAAQ,CAAC;EACvE;EAEAe,kBAAkB,CAChBC,cAAsB,EACtBD,kBAAgC;IAEhC,OAAO,IAAI,CAACtB,IAAI,CAACwB,GAAG,CAClB,GAAG,IAAI,CAACpB,MAAM,GAAGmB,cAAc,EAAE,EACjCD,kBAAkB,CACnB;EACH;EAEAG,kBAAkB,CAACF,cAAsB;IACvC,OAAO,IAAI,CAACvB,IAAI,CAAC0B,MAAM,CAAS,GAAG,IAAI,CAACtB,MAAM,GAAGmB,cAAc,EAAE,CAAC;EACpE;EAEAI,wBAAwB,CAACJ,cAAsB;IAC7C,OAAO,IAAI,CAACvB,IAAI,CAACG,GAAG,CAClB,GAAG,IAAI,CAACC,MAAM,gBAAgBmB,cAAc,EAAE,CAC/C;EACH;EAEAK,iBAAiB,CACfL,cAAsB,EACtBM,MAAc;IAEd,OAAO,IAAI,CAAC7B,IAAI,CAAC0B,MAAM,CACrB,GAAG,IAAI,CAACtB,MAAM,YAAYmB,cAAc,IAAIM,MAAM,EAAE,CACrD;EACH;EAEAC,sBAAsB,CACpBP,cAAsB,EACtBL,KAAa;IAEb,MAAMX,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACC,MAAM,EAAEC,CAAC,EAAE,EAAE;MACrCb,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAES,KAAK,CAACE,CAAC,CAAC,CAAC;;IAGpC,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CACnB,GAAG,IAAI,CAACjB,MAAM,YAAYmB,cAAc,EAAE,EAC1ChB,QAAQ,CACT;EACH;;SA5EWT,mBAAmB;;mBAAnBA,MAAmB;AAAA;;SAAnBA,MAAmB;EAAAiC,SAAnBjC,MAAmB;EAAAkC,YAFlB;AAAM","names":["TaskemployeeService","constructor","http","getTaskEmployeeService","searchTerm","get","apiUrl","createTaskEmployee","taskEmployeeData","formData","FormData","append","taskCreatedDate","toISOString","title","description","timeEstimated","toString","taskStatus","nameEmployee","files","length","i","post","updateTaskEmployee","taskEmployeeId","put","deleteTaskEmployee","delete","getTaskFilesByEmployeeId","deleteFileService","fileId","addFilesToTaskEmployee","factory","providedIn"],"sourceRoot":"","sources":["D:\\Projects\\PC-Line-computer-shops-Angular\\src\\app\\services\\taskemployee.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Taskemployee } from '../models/employeetask';\r\nimport { Observable } from 'rxjs';\r\nimport { TaskemployeeCreate } from '../models/employeetask-create';\r\nimport { TaskFiles } from '../models/task-files';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskemployeeService {\r\n  private apiUrl = 'https://localhost:7068/api/TaskEmployee/';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getTaskEmployeeService(searchTerm?: string): Observable<Taskemployee[]> {\r\n    return this.http.get<Taskemployee[]>(\r\n      `${this.apiUrl}?searchTerm=${searchTerm}`\r\n    );\r\n  }\r\n\r\n  createTaskEmployee(\r\n    taskEmployeeData: Taskemployee\r\n  ): Observable<TaskemployeeCreate> {\r\n    const formData = new FormData();\r\n    formData.append(\r\n      'taskCreatedDate',\r\n      taskEmployeeData.taskCreatedDate.toISOString()\r\n    );\r\n    formData.append('title', taskEmployeeData.title);\r\n    formData.append('description', taskEmployeeData.description);\r\n    formData.append('timeEstimated', taskEmployeeData.timeEstimated.toString());\r\n    formData.append('taskStatus', taskEmployeeData.taskStatus.toString());\r\n    formData.append('nameEmployee', taskEmployeeData.nameEmployee);\r\n\r\n    if (taskEmployeeData.files && taskEmployeeData.files.length > 0) {\r\n      for (let i = 0; i < taskEmployeeData.files.length; i++) {\r\n        formData.append('files', taskEmployeeData.files[i]);\r\n      }\r\n    }\r\n\r\n    return this.http.post<TaskemployeeCreate>(`${this.apiUrl}`, formData);\r\n  }\r\n\r\n  updateTaskEmployee(\r\n    taskEmployeeId: number,\r\n    updateTaskEmployee: Taskemployee\r\n  ): Observable<TaskemployeeCreate> {\r\n    return this.http.put<TaskemployeeCreate>(\r\n      `${this.apiUrl}${taskEmployeeId}`,\r\n      updateTaskEmployee\r\n    );\r\n  }\r\n\r\n  deleteTaskEmployee(taskEmployeeId: number): Observable<number> {\r\n    return this.http.delete<number>(`${this.apiUrl}${taskEmployeeId}`);\r\n  }\r\n\r\n  getTaskFilesByEmployeeId(taskEmployeeId: number): Observable<TaskFiles[]> {\r\n    return this.http.get<TaskFiles[]>(\r\n      `${this.apiUrl}GetTaskFiles/${taskEmployeeId}`\r\n    );\r\n  }\r\n\r\n  deleteFileService(\r\n    taskEmployeeId: number,\r\n    fileId: number\r\n  ): Observable<number> {\r\n    return this.http.delete<number>(\r\n      `${this.apiUrl}TaskFile/${taskEmployeeId}/${fileId}`\r\n    );\r\n  }\r\n\r\n  addFilesToTaskEmployee(\r\n    taskEmployeeId: number,\r\n    files: File[]\r\n  ): Observable<void> {\r\n    const formData = new FormData();\r\n    for (let i = 0; i < files.length; i++) {\r\n      formData.append('files', files[i]);\r\n    }\r\n\r\n    return this.http.post<void>(\r\n      `${this.apiUrl}AddFiles/${taskEmployeeId}`,\r\n      formData\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}