{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/authentication.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/button\";\nfunction RegisterComponent_mat_error_7_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Username is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, RegisterComponent_mat_error_7_span_1_Template, 2, 0, \"span\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r0.registerForm.get(\"username\")) == null ? null : tmp_0_0.hasError(\"required\"));\n  }\n}\nfunction RegisterComponent_mat_error_12_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_12_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Please enter a valid email.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, RegisterComponent_mat_error_12_span_1_Template, 2, 0, \"span\", 4);\n    i0.ɵɵtemplate(2, RegisterComponent_mat_error_12_span_2_Template, 2, 0, \"span\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r1.registerForm.get(\"email\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r1.registerForm.get(\"email\")) == null ? null : tmp_1_0.hasError(\"email\"));\n  }\n}\nfunction RegisterComponent_mat_error_17_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_17_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Password must contain at least one uppercase letter and one special character. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_17_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \" Password must be at least 6 characters long. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtemplate(1, RegisterComponent_mat_error_17_span_1_Template, 2, 0, \"span\", 4);\n    i0.ɵɵtemplate(2, RegisterComponent_mat_error_17_span_2_Template, 2, 0, \"span\", 4);\n    i0.ɵɵtemplate(3, RegisterComponent_mat_error_17_span_3_Template, 2, 0, \"span\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    let tmp_0_0;\n    let tmp_1_0;\n    let tmp_2_0;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (tmp_0_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_0_0.hasError(\"required\"));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_1_0.hasError(\"pattern\")) && !((tmp_1_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_1_0.hasError(\"required\")));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_2_0.hasError(\"minlength\")) && !((tmp_2_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_2_0.hasError(\"required\")) && !((tmp_2_0 = ctx_r2.registerForm.get(\"password\")) == null ? null : tmp_2_0.hasError(\"pattern\")));\n  }\n}\nexport class RegisterComponent {\n  constructor(fb, authenticationService, router) {\n    this.fb = fb;\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.registerForm = this.fb.group({\n      username: ['', Validators.required],\n      email: ['', [Validators.email, Validators.required]],\n      password: ['', [Validators.required, Validators.pattern(/^(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]+$/), Validators.minLength(6)]]\n    });\n  }\n  onSubmit(registerUser) {\n    this.authenticationService.registerUserService(registerUser).subscribe();\n  }\n}\n_class = RegisterComponent;\n_class.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-register\"]],\n  decls: 21,\n  vars: 5,\n  consts: [[1, \"container\", \"d-flex\", \"justify-content-center\", \"align-items-center\", 2, \"height\", \"100vh\"], [2, \"padding\", \"20px\"], [1, \"row\", 2, \"max-width\", \"400px\", \"width\", \"100%\", 3, \"formGroup\", \"ngSubmit\"], [\"matInput\", \"\", \"formControlName\", \"username\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"email\", \"formControlName\", \"email\"], [\"matInput\", \"\", \"type\", \"password\", \"formControlName\", \"password\"], [1, \"mt-3\", 2, \"padding-left\", \"280px\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit(ctx.registerForm.value);\n      });\n      i0.ɵɵelementStart(3, \"mat-form-field\")(4, \"mat-label\");\n      i0.ɵɵtext(5, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 3);\n      i0.ɵɵtemplate(7, RegisterComponent_mat_error_7_Template, 2, 1, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"mat-form-field\")(9, \"mat-label\");\n      i0.ɵɵtext(10, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(11, \"input\", 5);\n      i0.ɵɵtemplate(12, RegisterComponent_mat_error_12_Template, 3, 2, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"mat-form-field\")(14, \"mat-label\");\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"input\", 6);\n      i0.ɵɵtemplate(17, RegisterComponent_mat_error_17_Template, 4, 3, \"mat-error\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 7)(19, \"button\", 8);\n      i0.ɵɵtext(20, \" Submit \");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_1_0.invalid) && ((tmp_1_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_1_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.invalid) && ((tmp_2_0 = ctx.registerForm.get(\"email\")) == null ? null : tmp_2_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_3_0.touched) || ctx.registerForm.get(\"minlength\"));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.registerForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i5.MatCard, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.MatInput, i7.MatFormField, i7.MatLabel, i7.MatError, i8.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AACA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;;;;;;;;;ICmBzDC,4BACG;IAAAA,qCAAqB;IAAAA,iBACvB;;;;;IARHA,iCAKC;IACCA,gFAEC;IACHA,iBAAY;;;;;IAHHA,eAAwD;IAAxDA,oHAAwD;;;;;IAe/DA,4BACG;IAAAA,kCAAkB;IAAAA,iBACpB;;;;;IACDA,4BACG;IAAAA,2CAA2B;IAAAA,iBAC7B;;;;;IAXHA,iCAKC;IACCA,iFAEC;IACDA,iFAEC;IACHA,iBAAY;;;;;;IANHA,eAAqD;IAArDA,iHAAqD;IAGrDA,eAAkD;IAAlDA,8GAAkD;;;;;IAgBzDA,4BACG;IAAAA,qCAAqB;IAAAA,iBACvB;;;;;IACDA,4BAKC;IACCA,gGAEF;IAAAA,iBAAO;;;;;IACPA,4BAMC;IACCA,8DACF;IAAAA,iBAAO;;;;;IA3BTA,iCAMC;IACCA,iFAEC;IACDA,iFAQO;IACPA,iFAQO;IACTA,iBAAY;;;;;;;IArBHA,eAAwD;IAAxDA,oHAAwD;IAI5DA,eAGD;IAHCA,yNAGD;IAMCA,eAIF;IAJEA,8TAIF;;;AD5DX,OAAM,MAAOC,iBAAiB;EAG5BC,YACUC,EAAe,EACfC,qBAA4C,EAC5CC,MAAc;IAFd,OAAE,GAAFF,EAAE;IACF,0BAAqB,GAArBC,qBAAqB;IACrB,WAAM,GAANC,MAAM;IAEd,IAAI,CAACC,YAAY,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACnCC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACW,KAAK,EAAEX,UAAU,CAACU,QAAQ,CAAC,CAAC;MACpDE,QAAQ,EAAE,CACR,EAAE,EACF,CACEZ,UAAU,CAACU,QAAQ,EACnBV,UAAU,CAACa,OAAO,CAChB,mDAAmD,CACpD,EACDb,UAAU,CAACc,SAAS,CAAC,CAAC,CAAC,CACxB;KAEJ,CAAC;EACJ;EAEAC,QAAQ,CAACC,YAA0B;IACjC,IAAI,CAACX,qBAAqB,CAACY,mBAAmB,CAACD,YAAY,CAAC,CAACE,SAAS,EAAE;EAC1E;;SA1BWhB,iBAAiB;;mBAAjBA,MAAiB;AAAA;;QAAjBA,MAAiB;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX9BtB,8BAGC;MAIKA;QAAA,OAAYuB,oCAA4B;MAAA,EAAC;MAIzCvB,sCAAgB;MACHA,wBAAQ;MAAAA,iBAAY;MAC/BA,2BAA6C;MAC7CA,8EASY;MACdA,iBAAiB;MAEjBA,sCAAgB;MACHA,sBAAK;MAAAA,iBAAY;MAC5BA,4BAAuD;MACvDA,gFAYY;MACdA,iBAAiB;MAEjBA,uCAAgB;MACHA,yBAAQ;MAAAA,iBAAY;MAC/BA,4BAA6D;MAC7DA,gFA4BY;MACdA,iBAAiB;MAEjBA,+BAA8C;MAO1CA,yBACF;MAAAA,iBAAS;;;;;;MAhFXA,eAA0B;MAA1BA,4CAA0B;MASrBA,eAGD;MAHCA,yLAGD;MAYCA,eAGD;MAHCA,mLAGD;MAeCA,eAIF;MAJEA,8NAIF;MA+BCA,eAAiC;MAAjCA,mDAAiC","names":["Validators","i0","RegisterComponent","constructor","fb","authenticationService","router","registerForm","group","username","required","email","password","pattern","minLength","onSubmit","registerUser","registerUserService","subscribe","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\Projects\\PC-Line-computer-shops-Angular\\src\\app\\Authentication\\register\\register.component.ts","D:\\Projects\\PC-Line-computer-shops-Angular\\src\\app\\Authentication\\register\\register.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { RegisterUser } from 'src/app/models/register';\r\nimport { AuthenticationService } from 'src/app/services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss'],\r\n})\r\nexport class RegisterComponent {\r\n  registerForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authenticationService: AuthenticationService,\r\n    private router: Router\r\n  ) {\r\n    this.registerForm = this.fb.group({\r\n      username: ['', Validators.required],\r\n      email: ['', [Validators.email, Validators.required]],\r\n      password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.pattern(\r\n            /^(?=.*[A-Z])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]+$/\r\n          ),\r\n          Validators.minLength(6),\r\n        ],\r\n      ],\r\n    });\r\n  }\r\n\r\n  onSubmit(registerUser: RegisterUser) {\r\n    this.authenticationService.registerUserService(registerUser).subscribe();\r\n  }\r\n}\r\n","<div\r\n  class=\"container d-flex justify-content-center align-items-center\"\r\n  style=\"height: 100vh\"\r\n>\r\n  <mat-card style=\"padding: 20px\">\r\n    <form\r\n      [formGroup]=\"registerForm\"\r\n      (ngSubmit)=\"onSubmit(registerForm.value)\"\r\n      class=\"row\"\r\n      style=\"max-width: 400px; width: 100%\"\r\n    >\r\n      <mat-form-field>\r\n        <mat-label>Username</mat-label>\r\n        <input matInput formControlName=\"username\" />\r\n        <mat-error\r\n          *ngIf=\"\r\n            registerForm.get('username')?.invalid &&\r\n            registerForm.get('username')?.touched\r\n          \"\r\n        >\r\n          <span *ngIf=\"registerForm.get('username')?.hasError('required')\"\r\n            >Username is required.</span\r\n          >\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <mat-label>Email</mat-label>\r\n        <input matInput type=\"email\" formControlName=\"email\" />\r\n        <mat-error\r\n          *ngIf=\"\r\n            registerForm.get('email')?.invalid &&\r\n            registerForm.get('email')?.touched\r\n          \"\r\n        >\r\n          <span *ngIf=\"registerForm.get('email')?.hasError('required')\"\r\n            >Email is required.</span\r\n          >\r\n          <span *ngIf=\"registerForm.get('email')?.hasError('email')\"\r\n            >Please enter a valid email.</span\r\n          >\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <mat-label>Password</mat-label>\r\n        <input matInput type=\"password\" formControlName=\"password\" />\r\n        <mat-error\r\n          *ngIf=\"\r\n            (registerForm.get('password')?.invalid &&\r\n              registerForm.get('password')?.touched) ||\r\n            registerForm.get('minlength')\r\n          \"\r\n        >\r\n          <span *ngIf=\"registerForm.get('password')?.hasError('required')\"\r\n            >Password is required.</span\r\n          >\r\n          <span\r\n            *ngIf=\"\r\n              registerForm.get('password')?.hasError('pattern') &&\r\n              !registerForm.get('password')?.hasError('required')\r\n            \"\r\n          >\r\n            Password must contain at least one uppercase letter and one special\r\n            character.\r\n          </span>\r\n          <span\r\n            *ngIf=\"\r\n              registerForm.get('password')?.hasError('minlength') &&\r\n              !registerForm.get('password')?.hasError('required') &&\r\n              !registerForm.get('password')?.hasError('pattern')\r\n            \"\r\n          >\r\n            Password must be at least 6 characters long.\r\n          </span>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <div class=\"mt-3\" style=\"padding-left: 280px\">\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"registerForm.invalid\"\r\n        >\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </mat-card>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}