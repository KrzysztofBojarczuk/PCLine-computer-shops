{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./authentication.service\";\nexport class AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const token = this.authService.getToken();\n    if (token) {\n      const authReq = req.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return next.handle(authReq);\n    } else {\n      return next.handle(req);\n    }\n  }\n}\n_class = AuthInterceptor;\n_class.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthenticationService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"mappings":";;;AAUA,OAAM,MAAOA,eAAe;EAC1BC,YAAoBC,WAAkC;IAAlC,gBAAW,GAAXA,WAAW;EAA0B;EAEzDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAEzC,IAAID,KAAK,EAAE;MACT,MAAME,OAAO,GAAGJ,GAAG,CAACK,KAAK,CAAC;QACxBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;MAEF,OAAOD,IAAI,CAACO,MAAM,CAACJ,OAAO,CAAC;KAC5B,MAAM;MACL,OAAOH,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;;EAE3B;;SAjBWJ,eAAe;;mBAAfA,MAAe;AAAA;;SAAfA,MAAe;EAAAa,SAAfb,MAAe;AAAA","names":["AuthInterceptor","constructor","authService","intercept","req","next","token","getToken","authReq","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["D:\\Projects\\PC-Line-computer-shops-Angular\\src\\app\\services\\AuthInterceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpHeaders,\r\n} from '@angular/common/http';\r\nimport { AuthenticationService } from './authentication.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthenticationService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    const token = this.authService.getToken();\r\n\r\n    if (token) {\r\n      const authReq = req.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      return next.handle(authReq);\r\n    } else {\r\n      return next.handle(req);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}